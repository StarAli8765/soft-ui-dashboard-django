import json
import datetime
from flask import request
from flask_restx import Api, Resource
from flask_restx import Namespace

from werkzeug.datastructures import MultiDict

from apps.api import blueprint
from apps.authentication.decorators import token_required

from apps.api.forms import *
from apps.models    import *

api = Api(blueprint)

CMD_MODE_GET_ALL_MATCH = 0
CMD_MODE_SPORTS_REFRESH = 1
CMD_MODE_ALL_ODDS_PAGE = 2
CMD_MODE_1X2_ODDS_PAGE = 3
CMD_MODE_GET_BALANCE = 4
CMD_MODE_PAGE_TITLE = 5
CMD_MODE_ACTION_MATCH = 6

ACTION_MODE_ODDS_ONLY = 0
ACTION_MODE_ODDS_STAT = 1
ACTION_MODE_ODDS_INPLAY = 2
ACTION_MODE_ODDS_BET = 3

@api.route('/match/', methods=['POST', 'GET', 'DELETE', 'PUT'])
@api.route('/match/<int:match_id>/', methods=['GET', 'DELETE', 'PUT'])
class MatchRoute(Resource):
    def get(self, match_id: int = None):
        if match_id is None:
            all_objects = Matches.query.all()            
            output = [{'id': obj.id, **MatchesForm(obj=obj).data} for obj in all_objects]
        else:
            obj = Matches.query.get(match_id)
            if obj is None:
                return {
                           'message': 'matching record not found',
                           'success': False
                       }, 404
            output = {'id': obj.id, **MatchesForm(obj=obj).data}
        return {
                   'data': output,
                   'success': True
               }, 200
    
    @token_required
    def post(self):
        try:
            body_of_req = request.form
            if not body_of_req:                
                raise Exception()
        except Exception:
            if len(request.data) > 0:
                body_of_req = json.loads(request.data)
                print(body_of_req)
                bet_cmd_id = body_of_req['bet_cmd_id']
                op_cmd_id = body_of_req['op_cmd_id']
                cmd_result = body_of_req['cmd_result']
                result_str = body_of_req['result_str']
                if bet_cmd_id != -1:
                    bet_cmd = BetCmd.query.filter_by(id=bet_cmd_id).first()
                    if bet_cmd and cmd_result != -1:
                        setattr(bet_cmd, 'bet_result', cmd_result)
                        setattr(bet_cmd, 'result_str', result_str)
                        setattr(bet_cmd, 'home_score', body_of_req['home_score'])
                        setattr(bet_cmd, 'away_score', body_of_req['away_score'])
                        setattr(bet_cmd, 'match_status', body_of_req['match_status'])
                        setattr(bet_cmd, 'match_minute', body_of_req['match_minute'])
                        setattr(bet_cmd, 'FT_1X2', body_of_req['FT_1X2'])
                        setattr(bet_cmd, 'FT_HDP', body_of_req['FT_HDP'])
                        setattr(bet_cmd, 'FT_OE', body_of_req['FT_OE'])
                        setattr(bet_cmd, 'FT_OU', body_of_req['FT_OU'])
                        setattr(bet_cmd, 'NextGoal', body_of_req['NextGoal'])
                        print("updated bet cmd")
                        BetCmd.query.session.commit() 
                        print("after updated bet cmd") 

                if op_cmd_id != -1:
                    op_cmd = OpCmd.query.filter_by(id=op_cmd_id).first()
                    if op_cmd:
                        setattr(op_cmd, 'cmd_result', cmd_result)
                        setattr(op_cmd, 'result_str', result_str)
                        OpCmd.query.session.commit()
                        if not op_cmd.cmd_mode in [CMD_MODE_GET_ALL_MATCH, CMD_MODE_ACTION_MATCH]:
                            return {
                                'message': 'Operation posted!',
                                'success': True
                            }, 200
                if cmd_result == -1:
                    return {
                        'message': 'No Match!',
                        'success': False
                    }, 404
            else:
                body_of_req = {}
                return {
                    'message': 'Empty body request',
                    'success': False
                }, 404
        league_name = body_of_req['league_name']
        home_name = body_of_req['home_name']
        away_name = body_of_req['away_name']        
        to_edit_row = Match.query.filter_by(league_name=league_name, home_name=home_name, away_name=away_name)

        if not to_edit_row:
            return {
                       'message': 'matching record not found',
                       'success': False
                   }, 404

        obj = to_edit_row.first()

        if not obj:
            return {
                       'message': 'matching record not found',
                       'success': False
                   }, 404

        form = MatchForm(MultiDict(body_of_req), obj=obj)
        if not form.validate():
            return {
                       'message': form.errors,
                       'success': False
                   }, 404
        # table_cols = Match.__table__.columns.keys()
        table_cols = [attr.name for attr in to_edit_row.__dict__['_raw_columns'][0].columns._all_columns]

        for col in table_cols:
            value = body_of_req.get(col, None)
            if col == "FT_1X2":
                col = "FT_1X2_C"
            elif col == "FT_OE":
                col = "FT_OE_C"
            elif col == "FT_HDP":
                col = "FT_HDP_C"
            elif col == "FT_OU":
                col = "FT_OU_C"
            elif col == "NextGoal":
                col = "NextGoal_C"

            if value:
                setattr(obj, col, value)
        print("match update before")
        Match.query.session.add(obj)
        Match.query.session.commit()
        if body_of_req['bet_cmd_id'] != -1:
            print("match update after")
            return {
                    'message': 'Bet status posted!',
                    'success': True
                }, 200
        return {
                   'message': 'Action posted!',
                   'success': True
               }, 200

@api.route('/matches/', methods=['POST', 'GET', 'DELETE', 'PUT'])
class MatchesRoute(Resource):
    @token_required
    def post(self):
        try:
            if len(request.data) > 0:
                body_of_req = json.loads(request.data)
                # print(body_of_req)
                bet_cmd_id = body_of_req['bet_cmd_id']
                op_cmd_id = body_of_req['op_cmd_id']
                cmd_result = body_of_req['cmd_result']
                result_str = body_of_req['result_str']
                matches = body_of_req['matches']
                
                if op_cmd_id != -1:
                    op_cmd = OpCmd.query.filter_by(id=op_cmd_id).first()
                    if op_cmd:
                        setattr(op_cmd, 'cmd_result', cmd_result)
                        setattr(op_cmd, 'result_str', result_str)
                        OpCmd.query.session.commit()
                if cmd_result == -1:
                    return {
                        'message': 'No matches!',
                        'success': True
                    }, 404
                for match in matches:
                    league_name = match['league_name']
                    home_name = match['home_name']
                    away_name = match['away_name']
                    same_match = Match.query.filter_by(league_name=league_name, home_name=home_name, away_name=away_name).first()
                    if same_match:
                        setattr(same_match, 'home_score', match['home_score'])
                        setattr(same_match, 'away_score', match['away_score'])
                        setattr(same_match, 'match_status', match['match_status'])
                        setattr(same_match, 'match_minute', match['match_minute'])
                        setattr(same_match, 'FT_1X2_C', match['FT_1X2'])
                        # setattr(same_match, 'FT_OE_C', match['FT_OE'])
                        # setattr(same_match, 'FT_HDP_C', match['FT_HDP'])
                        # setattr(same_match, 'FT_OU_C', match['FT_OU'])
                        # setattr(same_match, 'NextGoal_C', match['NextGoal'])
                        setattr(same_match, 'updated_at', datetime.datetime.now())
                        Match.query.session.commit()
                    else:
                        form = MatchForm(MultiDict(match))
                        if form.validate():
                            try:
                                obj = Match(**match)
                                obj.FT_1X2_C = obj.FT_1X2
                                Match.query.session.add(obj)
                                Match.query.session.commit()
                            except Exception as e:
                                print(str(e))
                        else:
                            continue

            else:
                body_of_req = {}
                print("empty body")
            return {
                   'message': 'matches posted!',
                   'success': True
               }, 200
        except Exception as e:
                return {
                           'message': str(e),
                           'success': False
                       }, 400


@api.route('/command/', methods=['GET'])
class CommandRoute(Resource): 
    @token_required   
    def get(self):        
        op_cmds = OpCmd.query.filter_by(cmd_result=0)
        bet_cmds = BetCmd.query.filter_by(bet_result=0, bet_mode=1)
        output = []
        
        for bet_cmd in bet_cmds:
            bets = []
            match = bet_cmd.match
            setattr(bet_cmd, 'bet_result', -2)
            BetCmd.query.session.commit()
            bet = {
                'data_bt': bet_cmd.data_bt,
                'item': bet_cmd.item,
                'goal': bet_cmd.goal,
                'old_odd': bet_cmd.old_odd,
                'bet_value': bet_cmd.bet_value,
            }
            bets.append(bet)
            out = {
                'bet_cmd_id': bet_cmd.id, 
                'op_cmd_id': -1,
                'end_cmd': False, 
                'cmd_mode': CMD_MODE_ACTION_MATCH, 
                'action_mode': ACTION_MODE_ODDS_BET,
                'league_name': match.league_name,
                'home_name': match.home_name,
                'away_name': match.away_name,
                'bets': bets
            }
            # out = json.dumps(out)
            # print(out)
            output.append(out)

        for op_cmd in op_cmds:
            if op_cmd.action_mode == ACTION_MODE_ODDS_BET:
                continue    
            setattr(op_cmd, 'cmd_result', -2)
            OpCmd.query.session.commit()
            out = {}        
            if op_cmd.match_id == None:
                out = {
                    'bet_cmd_id': -1,
                    'op_cmd_id': op_cmd.id, 
                    'end_cmd': False, 
                    'cmd_mode': op_cmd.cmd_mode, 
                    'action_mode': op_cmd.action_mode
                }
            
            else:
                match = op_cmd.match
                out = {
                    'bet_cmd_id': -1,
                    'op_cmd_id': op_cmd.id, 
                    'end_cmd': False, 
                    'cmd_mode': op_cmd.cmd_mode, 
                    'action_mode': op_cmd.action_mode,
                    'league_name': match.league_name,
                    'home_name': match.home_name,
                    'away_name': match.away_name
                }
            output.append(out)
        
        return {
                   'data': output,
                   'success': True
               }, 200

@api.route('/balance/', methods=['POST'])
class BalanceRoute(Resource): 
    @token_required   
    def post(self):
        try:
            print("Here Balance")
            body_of_req = request.form
            if not body_of_req:                
                raise Exception()
        except Exception:
            if len(request.data) > 0:
                body_of_req = json.loads(request.data)
                print(body_of_req)
            else:
                body_of_req = {}
                print("empty body")
        form = BalanceForm(MultiDict(body_of_req))
        if form.validate():
            try:
                obj = Balance(**body_of_req)
                Balance.query.session.add(obj)
                Balance.query.session.commit()
            except Exception as e:
                return {
                           'message': str(e),
                           'success': False
                       }, 400
        else:
            return {
                       'message': form.errors,
                       'success': False
                   }, 400
        return {
                   'message': 'Thanks, balance info saved!',
                   'success': True
               }, 200

#===== Template REST route =====           
@api.route('/books/', methods=['POST', 'GET', 'DELETE', 'PUT'])
@api.route('/books/<int:model_id>/', methods=['GET', 'DELETE', 'PUT'])
class BookRoute(Resource):
    def get(self, model_id: int = None):
        if model_id is None:
            all_objects = Book.query.all()
            output = [{'id': obj.id, **BookForm(obj=obj).data} for obj in all_objects]
        else:
            obj = Book.query.get(model_id)
            if obj is None:
                return {
                           'message': 'matching record not found',
                           'success': False
                       }, 404
            output = {'id': obj.id, **BookForm(obj=obj).data}
        return {
                   'data': output,
                   'success': True
               }, 200

    @token_required
    def post(self):
        try:
            print("Here")
            body_of_req = request.form
            if not body_of_req:                
                raise Exception()
        except Exception:
            if len(request.data) > 0:
                body_of_req = json.loads(request.data)
            else:
                body_of_req = {}
        form = BookForm(MultiDict(body_of_req))
        if form.validate():
            try:
                obj = Book(**body_of_req)
                Book.query.session.add(obj)
                Book.query.session.commit()
            except Exception as e:
                return {
                           'message': str(e),
                           'success': False
                       }, 400
        else:
            return {
                       'message': form.errors,
                       'success': False
                   }, 400
        return {
                   'message': 'record saved!',
                   'success': True
               }, 200

    @token_required
    def put(self, model_id: int):
        try:
            body_of_req = request.form
            if not body_of_req:
                raise Exception()
        except Exception:
            if len(request.data) > 0:
                body_of_req = json.loads(request.data)
            else:
                body_of_req = {}

        to_edit_row = Book.query.filter_by(id=model_id)

        if not to_edit_row:
            return {
                       'message': 'matching record not found',
                       'success': False
                   }, 404

        obj = to_edit_row.first()

        if not obj:
            return {
                       'message': 'matching record not found',
                       'success': False
                   }, 404

        form = BookForm(MultiDict(body_of_req), obj=obj)
        if not form.validate():
            return {
                       'message': form.errors,
                       'success': False
                   }, 404

        table_cols = [attr.name for attr in to_edit_row.__dict__['_raw_columns'][0].columns._all_columns]

        for col in table_cols:
            value = body_of_req.get(col, None)
            if value:
                setattr(obj, col, value)
        Book.query.session.add(obj)
        Book.query.session.commit()
        return {
            'message': 'record updated',
            'success': True
        }

    @token_required
    def delete(self, model_id: int):
        to_delete = Book.query.filter_by(id=model_id)
        if to_delete.count() == 0:
            return {
                       'message': 'matching record not found',
                       'success': False
                   }, 404
        to_delete.delete()
        Book.query.session.commit()
        return {
                   'message': 'record deleted!',
                   'success': True
               }, 200